import React, { PropTypes } from "react"
import renderer from "react-test-renderer"

import { Hoverable, Touchable, Focusable } from ".." // "react-event-as-prop"

const Button = ({ hovered, touched, focused, ...props }) => {
  return (
    <button
      // really important, it's to pass on{Event}* generated by the HoCs
      { ...props }

      style={{
        ...styles.main,
        ...hovered && styles.hovered,
        ...touched && styles.touched,
        ...focused && styles.focused,
      }}
    >
      { "Submit" }
    </button>
  )
}

Button.propTypes = {
  hovered: PropTypes.bool.isRequired,
  touched: PropTypes.bool.isRequired,
  focused: PropTypes.bool.isRequired,

  // spread as ...props
  // hovered
  onMouseEnter: PropTypes.func.isRequired,
  onMouseLeave: PropTypes.func.isRequired,
  // touched
  onMouseDown: PropTypes.func.isRequired,
  onMouseUp: PropTypes.func.isRequired,
  // focused
  onFocus: PropTypes.func.isRequired,
  onBlur: PropTypes.func.isRequired,
}

const styles = {
  main: {
    fontWeight: "100",
  },
  hovered: {
    fontWeight: "bold",
  },
  touched: {
    opacity: 0.6,
  },
  focused: {
    outline: "1px solid red",
  },
}

const SuperButton = Hoverable(Touchable(Focusable(Button)))

test("props changes when event changes", () => {
  const component = renderer.create(
    <SuperButton />
  )
  let tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  // hovered

  tree.props.onMouseEnter()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  tree.props.onMouseLeave()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  // touched

  tree.props.onMouseDown()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  tree.props.onMouseUp()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  // focused

  tree.props.onFocus()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()

  tree.props.onBlur()
  tree = component.toJSON()
  expect(tree).toMatchSnapshot()
})
